//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "/api";
    }

    /**
     * @return Ok
     */
    getAllDomains(): Promise<Graph> {
        let url_ = this.baseUrl + "/graph/domains";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            },
            credentials: 'include',
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllDomains(_response);
        });
    }

    protected processGetAllDomains(response: Response): Promise<Graph> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Graph.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Graph>(null as any);
    }

    /**
     * @return Ok
     */
    getNode(body: QueryOptions): Promise<Anonymous> {
        let url_ = this.baseUrl + "/graph/node";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            credentials: 'include',
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNode(_response);
        });
    }

    protected processGetNode(response: Response): Promise<Anonymous> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Anonymous>(null as any);
    }
}

export class NodeData implements INodeData {
    id!: string;
    labels!: string[];
    properties!: Properties;

    constructor(data?: INodeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.labels = [];
            this.properties = new Properties();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels!.push(item);
            }
            this.properties = _data["properties"] ? Properties.fromJS(_data["properties"]) : new Properties();
        }
    }

    static fromJS(data: any): NodeData {
        data = typeof data === 'object' ? data : {};
        let result = new NodeData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item);
        }
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeData {
    id: string;
    labels: string[];
    properties: Properties;
}

export class Node implements INode {
    data!: NodeData;

    constructor(data?: INode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new NodeData();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? NodeData.fromJS(_data["data"]) : new NodeData();
        }
    }

    static fromJS(data: any): Node {
        data = typeof data === 'object' ? data : {};
        let result = new Node();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface INode {
    data: NodeData;
}

export class EdgeData implements IEdgeData {
    id!: string;
    source!: string;
    target!: string;
    label!: string;
    properties!: properties;

    constructor(data?: IEdgeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.properties = new properties();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.source = _data["source"];
            this.target = _data["target"];
            this.label = _data["label"];
            this.properties = _data["properties"] ? properties.fromJS(_data["properties"]) : new properties();
        }
    }

    static fromJS(data: any): EdgeData {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["source"] = this.source;
        data["target"] = this.target;
        data["label"] = this.label;
        data["properties"] = this.properties ? this.properties.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEdgeData {
    id: string;
    source: string;
    target: string;
    label: string;
    properties: properties;
}

export class Edge implements IEdge {
    data!: EdgeData;

    constructor(data?: IEdge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new EdgeData();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? EdgeData.fromJS(_data["data"]) : new EdgeData();
        }
    }

    static fromJS(data: any): Edge {
        data = typeof data === 'object' ? data : {};
        let result = new Edge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEdge {
    data: EdgeData;
}

/** Graph as labelled property graph (cytoscape.js format) */
export class Graph implements IGraph {
    name!: string;
    nodes!: Node[];
    edges!: Edge[];

    constructor(data?: IGraph) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nodes = [];
            this.edges = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(Node.fromJS(item));
            }
            if (Array.isArray(_data["edges"])) {
                this.edges = [] as any;
                for (let item of _data["edges"])
                    this.edges!.push(Edge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Graph {
        data = typeof data === 'object' ? data : {};
        let result = new Graph();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.edges)) {
            data["edges"] = [];
            for (let item of this.edges)
                data["edges"].push(item.toJSON());
        }
        return data;
    }
}

/** Graph as labelled property graph (cytoscape.js format) */
export interface IGraph {
    name: string;
    nodes: Node[];
    edges: Edge[];
}

export class QueryOptions implements IQueryOptions {
    id!: string;
    layerDepth!: number;
    dependencyDepth!: number;
    onlyInternalRelations?: boolean;
    onlyExternalRelations?: boolean;
    showDependencies?: boolean;
    showDependents?: boolean;
    dependencyRange?: DependencyRange;
    dependentRange?: DependentRange;

    constructor(data?: IQueryOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.layerDepth = _data["layerDepth"];
            this.dependencyDepth = _data["dependencyDepth"];
            this.onlyInternalRelations = _data["onlyInternalRelations"];
            this.onlyExternalRelations = _data["onlyExternalRelations"];
            this.showDependencies = _data["showDependencies"];
            this.showDependents = _data["showDependents"];
            this.dependencyRange = _data["dependencyRange"] ? DependencyRange.fromJS(_data["dependencyRange"]) : <any>undefined;
            this.dependentRange = _data["dependentRange"] ? DependentRange.fromJS(_data["dependentRange"]) : <any>undefined;
        }
    }

    static fromJS(data: any): QueryOptions {
        data = typeof data === 'object' ? data : {};
        let result = new QueryOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["layerDepth"] = this.layerDepth;
        data["dependencyDepth"] = this.dependencyDepth;
        data["onlyInternalRelations"] = this.onlyInternalRelations;
        data["onlyExternalRelations"] = this.onlyExternalRelations;
        data["showDependencies"] = this.showDependencies;
        data["showDependents"] = this.showDependents;
        data["dependencyRange"] = this.dependencyRange ? this.dependencyRange.toJSON() : <any>undefined;
        data["dependentRange"] = this.dependentRange ? this.dependentRange.toJSON() : <any>undefined;
        return data;
    }
}

export interface IQueryOptions {
    id: string;
    layerDepth: number;
    dependencyDepth: number;
    onlyInternalRelations?: boolean;
    onlyExternalRelations?: boolean;
    showDependencies?: boolean;
    showDependents?: boolean;
    dependencyRange?: DependencyRange;
    dependentRange?: DependentRange;
}

export class Anonymous implements IAnonymous {

    [key: string]: any;

    constructor(data?: IAnonymous) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Anonymous {
        data = typeof data === 'object' ? data : {};
        let result = new Anonymous();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IAnonymous {

    [key: string]: any;
}

export class Properties implements IProperties {
    selected!: PropertiesSelected;
    depth!: number;
    color!: string;
    traces!: string[];
    kind!: string;
    simpleName!: string;

    [key: string]: any;

    constructor(data?: IProperties) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.traces = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.selected = _data["selected"];
            this.depth = _data["depth"];
            this.color = _data["color"];
            if (Array.isArray(_data["traces"])) {
                this.traces = [] as any;
                for (let item of _data["traces"])
                    this.traces!.push(item);
            }
            this.kind = _data["kind"];
            this.simpleName = _data["simpleName"];
        }
    }

    static fromJS(data: any): Properties {
        data = typeof data === 'object' ? data : {};
        let result = new Properties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["selected"] = this.selected;
        data["depth"] = this.depth;
        data["color"] = this.color;
        if (Array.isArray(this.traces)) {
            data["traces"] = [];
            for (let item of this.traces)
                data["traces"].push(item);
        }
        data["kind"] = this.kind;
        data["simpleName"] = this.simpleName;
        return data;
    }
}

export interface IProperties {
    selected: PropertiesSelected;
    depth: number;
    color: string;
    traces: string[];
    kind: string;
    simpleName: string;

    [key: string]: any;
}

export class properties implements Iproperties {
    traces!: string[];
    weight!: number;

    [key: string]: any;

    constructor(data?: Iproperties) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.traces = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            if (Array.isArray(_data["traces"])) {
                this.traces = [] as any;
                for (let item of _data["traces"])
                    this.traces!.push(item);
            }
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): properties {
        data = typeof data === 'object' ? data : {};
        let result = new properties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        if (Array.isArray(this.traces)) {
            data["traces"] = [];
            for (let item of this.traces)
                data["traces"].push(item);
        }
        data["weight"] = this.weight;
        return data;
    }
}

export interface Iproperties {
    traces: string[];
    weight: number;

    [key: string]: any;
}

export class DependencyRange implements IDependencyRange {
    max?: number;
    min?: number;

    [key: string]: any;

    constructor(data?: IDependencyRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.max = _data["max"];
            this.min = _data["min"];
        }
    }

    static fromJS(data: any): DependencyRange {
        data = typeof data === 'object' ? data : {};
        let result = new DependencyRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["max"] = this.max;
        data["min"] = this.min;
        return data;
    }
}

export interface IDependencyRange {
    max?: number;
    min?: number;

    [key: string]: any;
}

export class DependentRange implements IDependentRange {
    max?: number;
    min?: number;

    [key: string]: any;

    constructor(data?: IDependentRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.max = _data["max"];
            this.min = _data["min"];
        }
    }

    static fromJS(data: any): DependentRange {
        data = typeof data === 'object' ? data : {};
        let result = new DependentRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["max"] = this.max;
        data["min"] = this.min;
        return data;
    }
}

export interface IDependentRange {
    max?: number;
    min?: number;

    [key: string]: any;
}

export enum PropertiesSelected {
    True = "true",
    False = "false",
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}