// This file is auto-generated by @hey-api/openapi-ts

export const $GitCommitInfo = {
    properties: {
        hash: {
            type: 'string'
        },
        shortHash: {
            type: 'string'
        },
        date: {
            type: 'string',
            format: 'date-time'
        },
        tags: {
            items: {
                type: 'string'
            },
            type: 'array'
        }
    },
    required: ['hash', 'shortHash', 'date', 'tags'],
    type: 'object',
    additionalProperties: false
} as const;

export const $ModuleDependencyProfileCategory = {
    enum: ['hidden', 'inbound', 'outbound', 'transit'],
    type: 'string'
} as const;

export const $Domain = {
    properties: {
        id: {
            type: 'string',
            description: 'Unique node identifier'
        },
        label: {
            type: 'string',
            description: 'Node label (name)'
        },
        parent: {
            type: 'string',
            description: 'ID of the parent node (if it exists)'
        },
        properties: {
            properties: {
                nrLeaves: {
                    type: 'number',
                    format: 'double',
                    description: `How many lowest-layer nodes are contained in this node.
1 if node itself is a leaf.
Undefined if it cannot be calculated`
                },
                nrRESTProducers: {
                    type: 'number',
                    format: 'double'
                },
                nrRESTConsumers: {
                    type: 'number',
                    format: 'double'
                },
                nrPublicElements: {
                    type: 'number',
                    format: 'double'
                },
                nrEntities: {
                    type: 'number',
                    format: 'double'
                },
                nrScreens: {
                    type: 'number',
                    format: 'double'
                },
                fileSizeKB: {
                    type: 'number',
                    format: 'double'
                },
                cohesion: {
                    type: 'number',
                    format: 'double',
                    description: 'Cohesion metric of leaves within this node'
                },
                dependencyProfile: {
                    items: {
                        type: 'number',
                        format: 'double'
                    },
                    type: 'array',
                    description: `Dependency profile of the given node. Quadruple of four categories
[hidden, inbound, outbound, transit] if internal (tree) node. Undefined if leaf node.`
                },
                dependencyProfileCategory: {
                    '$ref': '#/components/schemas/ModuleDependencyProfileCategory',
                    description: 'The type of dependency profile this node is. Only for bottom-layer nodes'
                },
                selected: {
                    type: 'string',
                    enum: ['true', 'false'],
                    description: 'Whether this node is selected or not'
                },
                color: {
                    type: 'string',
                    description: 'Hex color this node should be'
                },
                layer: {
                    type: 'string',
                    description: 'Layer this node is in'
                },
                fullName: {
                    type: 'string',
                    description: 'Full name of the node (including prefixes)'
                }
            },
            required: ['dependencyProfile', 'selected', 'color', 'layer', 'fullName'],
            type: 'object',
            description: 'Custom properties of node'
        },
        nrOutgoingDependencies: {
            type: 'number',
            format: 'double'
        },
        nrIncomingDependencies: {
            type: 'number',
            format: 'double'
        },
        nrInternalDependencies: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['id', 'label', 'properties', 'nrOutgoingDependencies', 'nrIncomingDependencies', 'nrInternalDependencies'],
    type: 'object',
    additionalProperties: false
} as const;

export const $GraphLayer = {
    properties: {
        label: {
            type: 'string'
        },
        classes: {
            items: {
                type: 'string'
            },
            type: 'array'
        },
        parentLabel: {
            type: 'string'
        }
    },
    required: ['label', 'classes'],
    type: 'object',
    additionalProperties: false
} as const;

export const $ErrorResponse = {
    properties: {
        message: {
            type: 'string'
        }
    },
    required: ['message'],
    type: 'object',
    additionalProperties: false
} as const;

export const $NodeData = {
    properties: {
        id: {
            type: 'string',
            description: 'Unique node identifier'
        },
        label: {
            type: 'string',
            description: 'Node label (name)'
        },
        parent: {
            type: 'string',
            description: 'ID of the parent node (if it exists)'
        },
        properties: {
            properties: {
                nrLeaves: {
                    type: 'number',
                    format: 'double',
                    description: `How many lowest-layer nodes are contained in this node.
1 if node itself is a leaf.
Undefined if it cannot be calculated`
                },
                nrRESTProducers: {
                    type: 'number',
                    format: 'double'
                },
                nrRESTConsumers: {
                    type: 'number',
                    format: 'double'
                },
                nrPublicElements: {
                    type: 'number',
                    format: 'double'
                },
                nrEntities: {
                    type: 'number',
                    format: 'double'
                },
                nrScreens: {
                    type: 'number',
                    format: 'double'
                },
                fileSizeKB: {
                    type: 'number',
                    format: 'double'
                },
                cohesion: {
                    type: 'number',
                    format: 'double',
                    description: 'Cohesion metric of leaves within this node'
                },
                dependencyProfile: {
                    items: {
                        type: 'number',
                        format: 'double'
                    },
                    type: 'array',
                    description: `Dependency profile of the given node. Quadruple of four categories
[hidden, inbound, outbound, transit] if internal (tree) node. Undefined if leaf node.`
                },
                dependencyProfileCategory: {
                    '$ref': '#/components/schemas/ModuleDependencyProfileCategory',
                    description: 'The type of dependency profile this node is. Only for bottom-layer nodes'
                },
                selected: {
                    type: 'string',
                    enum: ['true', 'false'],
                    description: 'Whether this node is selected or not'
                },
                color: {
                    type: 'string',
                    description: 'Hex color this node should be'
                },
                layer: {
                    type: 'string',
                    description: 'Layer this node is in'
                },
                fullName: {
                    type: 'string',
                    description: 'Full name of the node (including prefixes)'
                }
            },
            required: ['dependencyProfile', 'selected', 'color', 'layer', 'fullName'],
            type: 'object',
            description: 'Custom properties of node'
        }
    },
    required: ['id', 'label', 'properties'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Node = {
    properties: {
        data: {
            '$ref': '#/components/schemas/NodeData'
        }
    },
    required: ['data'],
    type: 'object',
    additionalProperties: false
} as const;

export const $EdgeViolations = {
    properties: {
        subLayer: {
            type: 'boolean'
        },
        dependencyCycle: {
            type: 'boolean'
        }
    },
    required: ['subLayer', 'dependencyCycle'],
    type: 'object',
    additionalProperties: false
} as const;

export const $EdgeReferences = {
    properties: {
        type: {
            type: 'string',
            description: `Type of reference used within OutSystems
(e.g. Action, Entity, Integration, WebBlock, etc.)`
        },
        names: {
            items: {
                type: 'string'
            },
            type: 'array',
            description: 'Names of the actual references in OutSystems'
        }
    },
    required: ['type', 'names'],
    type: 'object',
    additionalProperties: false
} as const;

export const $DependencyType = {
    enum: ['compile_time', 'runtime', 'entity'],
    type: 'string'
} as const;

export const $EdgeDataProperties = {
    properties: {
        violations: {
            allOf: [
                {
                    '$ref': '#/components/schemas/EdgeViolations'
                },
                {
                    properties: {
                        any: {
                            type: 'boolean'
                        }
                    },
                    required: ['any'],
                    type: 'object'
                }
            ],
            description: 'Whether this edge is some architectural violation'
        },
        references: {
            items: {
                '$ref': '#/components/schemas/EdgeReferences'
            },
            type: 'array',
            description: 'Actual references in OutSystems'
        },
        dependencyTypes: {
            items: {
                '$ref': '#/components/schemas/DependencyType'
            },
            type: 'array',
            description: 'Type of dependency'
        },
        nrModuleDependencies: {
            type: 'number',
            format: 'double',
            description: 'How many module-level dependencies exist within the source and target node'
        },
        nrFunctionDependencies: {
            type: 'number',
            format: 'double',
            description: 'How many actual, function-level dependencies exist within the source and target node'
        },
        nrCalls: {
            type: 'number',
            format: 'double',
            description: `How many times the "weak" relationships are called in the
database-inserted timeframe. Undefined if no weak relationship`
        }
    },
    required: ['violations', 'references', 'dependencyTypes', 'nrModuleDependencies', 'nrFunctionDependencies'],
    type: 'object',
    additionalProperties: false
} as const;

export const $EdgeData = {
    properties: {
        id: {
            type: 'string',
            description: 'Unique edge identifier'
        },
        source: {
            type: 'string',
            description: 'Identifier of source node'
        },
        target: {
            type: 'string',
            description: 'Identifier of target node'
        },
        interaction: {
            type: 'string',
            description: 'Edge label'
        },
        properties: {
            '$ref': '#/components/schemas/EdgeDataProperties',
            description: 'Custom properties'
        }
    },
    required: ['id', 'source', 'target', 'interaction', 'properties'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Edge = {
    properties: {
        data: {
            '$ref': '#/components/schemas/EdgeData'
        }
    },
    required: ['data'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Graph = {
    description: 'Graph as labelled property graph (cytoscape.js format)',
    properties: {
        name: {
            type: 'string'
        },
        nodes: {
            items: {
                '$ref': '#/components/schemas/Node'
            },
            type: 'array'
        },
        edges: {
            items: {
                '$ref': '#/components/schemas/Edge'
            },
            type: 'array'
        }
    },
    required: ['name', 'nodes', 'edges'],
    type: 'object',
    additionalProperties: false
} as const;

export const $ExtendedSimpleEdgeData = {
    description: `Edge data without graph properties, but which explicit
details about source and target nodes`,
    properties: {
        id: {
            type: 'string',
            description: 'Unique edge identifier'
        },
        source: {
            type: 'string',
            description: 'Identifier of source node'
        },
        target: {
            type: 'string',
            description: 'Identifier of target node'
        },
        interaction: {
            type: 'string',
            description: 'Edge label'
        },
        sourceNode: {
            '$ref': '#/components/schemas/NodeData',
            description: 'Source node object'
        },
        targetNode: {
            '$ref': '#/components/schemas/NodeData',
            description: 'Target node object'
        }
    },
    required: ['id', 'source', 'target', 'interaction', 'sourceNode', 'targetNode'],
    type: 'object',
    additionalProperties: false
} as const;

export const $DependencyCycle = {
    properties: {
        node: {
            '$ref': '#/components/schemas/NodeData'
        },
        path: {
            items: {
                '$ref': '#/components/schemas/ExtendedSimpleEdgeData'
            },
            type: 'array'
        },
        length: {
            type: 'number',
            format: 'double'
        }
    },
    required: ['node', 'path', 'length'],
    type: 'object',
    additionalProperties: false
} as const;

export const $DependencyCycleRender = {
    properties: {
        node: {
            '$ref': '#/components/schemas/NodeData'
        },
        path: {
            items: {
                '$ref': '#/components/schemas/ExtendedSimpleEdgeData'
            },
            type: 'array'
        },
        length: {
            type: 'number',
            format: 'double'
        },
        actualCycles: {
            items: {
                '$ref': '#/components/schemas/DependencyCycle'
            },
            type: 'array'
        },
        id: {
            type: 'string'
        }
    },
    required: ['node', 'path', 'length', 'actualCycles', 'id'],
    type: 'object',
    additionalProperties: false
} as const;

export const $LayerViolation = {
    properties: {
        id: {
            type: 'string',
            description: 'Unique edge identifier'
        },
        source: {
            type: 'string',
            description: 'Identifier of source node'
        },
        target: {
            type: 'string',
            description: 'Identifier of target node'
        },
        interaction: {
            type: 'string',
            description: 'Edge label'
        },
        sourceNode: {
            '$ref': '#/components/schemas/NodeData',
            description: 'Source node object'
        },
        targetNode: {
            '$ref': '#/components/schemas/NodeData',
            description: 'Target node object'
        },
        actualEdges: {
            items: {
                '$ref': '#/components/schemas/ExtendedSimpleEdgeData'
            },
            type: 'array'
        }
    },
    required: ['id', 'source', 'target', 'interaction', 'sourceNode', 'targetNode', 'actualEdges'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Violations = {
    properties: {
        dependencyCycles: {
            items: {
                '$ref': '#/components/schemas/DependencyCycleRender'
            },
            type: 'array'
        },
        subLayers: {
            items: {
                '$ref': '#/components/schemas/LayerViolation'
            },
            type: 'array'
        }
    },
    required: ['dependencyCycles', 'subLayers'],
    type: 'object',
    additionalProperties: false
} as const;

export const $GraphWithViolations = {
    properties: {
        graph: {
            '$ref': '#/components/schemas/Graph'
        },
        violations: {
            '$ref': '#/components/schemas/Violations'
        }
    },
    required: ['graph', 'violations'],
    type: 'object',
    additionalProperties: false
} as const;

export const $QueryOptions = {
    properties: {
        layerDepth: {
            type: 'integer',
            format: 'int32',
            minimum: 0
        },
        dependencyLength: {
            type: 'number',
            format: 'double'
        },
        showSelectedInternalRelations: {
            type: 'boolean',
            description: 'Query relationships that are contained within the selection'
        },
        showDomainInternalRelations: {
            type: 'boolean',
            description: "Query relationships that are contained within the selection's domain"
        },
        showExternalRelations: {
            type: 'boolean',
            description: "Query relationships that are not contained within the selection's domain"
        },
        includeUnclassifiedApplications: {
            type: 'boolean',
            description: 'Whether to include applications that existing in the unclassified domain. True by default'
        },
        showOutgoing: {
            type: 'boolean',
            description: 'Query outgoing relationships from the starting point'
        },
        showIncoming: {
            type: 'boolean',
            description: 'Query incoming relationships from the starting point'
        },
        outgoingRangeMin: {
            type: 'number',
            format: 'double'
        },
        outgoingRangeMax: {
            type: 'number',
            format: 'double'
        },
        incomingRangeMin: {
            type: 'number',
            format: 'double'
        },
        incomingRangeMax: {
            type: 'number',
            format: 'double'
        },
        selfEdges: {
            type: 'boolean',
            description: 'Return relationships that (after lifting) depend on itself'
        },
        showRuntimeDependencies: {
            type: 'boolean'
        },
        showCompileTimeDependencies: {
            type: 'boolean'
        },
        showEntityDependencies: {
            type: 'boolean'
        }
    },
    required: ['layerDepth', 'dependencyLength'],
    type: 'object',
    additionalProperties: false
} as const;

export const $Breadcrumb = {
    properties: {
        name: {
            type: 'string'
        },
        layerLabel: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        options: {
            items: {
                '$ref': '#/components/schemas/NodeData'
            },
            type: 'array'
        }
    },
    required: ['name', 'layerLabel', 'options'],
    type: 'object',
    additionalProperties: false
} as const;

export const $BaseQueryOptions = {
    properties: {
        layerDepth: {
            type: 'integer',
            format: 'int32',
            minimum: 0
        }
    },
    required: ['layerDepth'],
    type: 'object',
    additionalProperties: false
} as const;